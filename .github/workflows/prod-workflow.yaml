name: Build Production APK
on:
  workflow_dispatch:
    inputs:
      version:
        description: Specify Bump version
        required: true
        default: 1.0.0
      release:
        description: Release the outputs of this run
        required: false
        default: "false"

  push:
    branches:
      - main
      - releases
  pull_request:
    branches:
      - main
      - releases
    types:
      - opened
      - reopened
      - synchronize

jobs:
  setup:
    name: Setup Build Environment
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    env:
      APP_NAME: "Secureme"
      GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      FLUTTER_CHANNEL: "beta"
      FLUTTER_VERSION: "2.2.0"
      FLUTTER_RESTORE_KEY: ${{ matrix.os }}-flutter-install-cache-key-001
      NDK_RESTORE_KEY: ${{ matrix.os }}-android-ndk-21.0.6113669-v2
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            flutter_path: "$GITHUB_WORKSPACE/flutter"
            ndk_path: "/usr/local/lib/android/sdk/ndk"
    steps:
      - name: Prepare ndk dir for caching
        run: |
          sudo mkdir -p /usr/local/lib/android/sdk/ndk
          sudo chmod -R 777 /usr/local/lib/android/sdk/ndk
          sudo chown -R $USER:$USER /usr/local/lib/android/sdk/ndk

      - name: Cache Flutter Installation
        id: flutter-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-flutter-installation
        with:
          path: "flutter"
          key: ${{ env.FLUTTER_RESTORE_KEY }}
          restore-keys: ${{ env.FLUTTER_RESTORE_KEY }}

      - name: Cache NDK Installation
        id: ndk-cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.ndk_path }}
          key: ${{ env.NDK_RESTORE_KEY }}
          restore-keys: ${{ env.NDK_RESTORE_KEY }}

      - name: Install Flutter Channel ${{ env.FLUTTER_CHANNEL }}-${{ env.FLUTTER_VERSION }}
        if: steps.flutter-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: "flutter/flutter"
          ref: ${{ env.FLUTTER_CHANNEL }}
          path: "flutter"
          fetch-depth: 0

      - name: Set up Java Environment
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Install NDK
        if: steps.ndk-cache.outputs.cache-hit != 'true'
        run: echo "y" | sudo ${ANDROID_SDK_ROOT}/tools/bin/sdkmanager --install "ndk;21.0.6113669"

      # - name: Post setup run scipts
      #   run: |
      #     cd flutter
      #     flutter doctor -v
      #     flutter precache
      #   working-directory: secureme

  build:
    name: Build APK
    needs: setup
    runs-on: ${{ matrix.os }}
    env:
      APP_NAME: "Secureme"
      GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      FLUTTER_CHANNEL: "beta"
      FLUTTER_VERSION: "2.2.0"
      FLUTTER_RESTORE_KEY: ${{ matrix.os }}-flutter-install-cache-key-001
      NDK_RESTORE_KEY: ${{ matrix.os }}-android-ndk-21.0.6113669-v2
    outputs:
      now: ${{ env.DATE_TIME_NOW }}
      armeabi_v7a: ${{ env.ARMEABI_V7A_ARTIFACT }}
      arm64_v8a: ${{ env.ARM64_V8A_ARTIFACT }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            flutter_path: "$GITHUB_WORKSPACE/flutter"
            app_path: "$GITHUB_WORKSPACE/secureme"
            ndk_path: "/usr/local/lib/android/sdk/ndk"
    steps:
      - name: Checkout to ${{ env.APP_NAME }} Repository
        uses: actions/checkout@v2
        with:
          path: "secureme"
          fetch-depth: 0

      - name: Prepare ndk dir for restore
        run: |
          sudo mkdir -p /usr/local/lib/android/sdk/ndk
          sudo chmod -R 777 /usr/local/lib/android/sdk/ndk
          sudo chown -R $USER:$USER /usr/local/lib/android/sdk/ndk

      - name: Restore Flutter Cache
        id: flutter-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-flutter-installation
        with:
          path: "flutter"
          key: ${{ env.FLUTTER_RESTORE_KEY }}
          restore-keys: ${{ env.FLUTTER_RESTORE_KEY }}

      - name: Restore NDK Cache
        id: ndk-cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.ndk_path }}
          key: ${{ env.NDK_RESTORE_KEY }}
          restore-keys: ${{ env.NDK_RESTORE_KEY }}

      - name: Add Flutter to the PATH for Unix
        if: startsWith(matrix.os, 'macOS') || startsWith(matrix.os, 'ubuntu')
        run: |
          echo "${{ matrix.flutter_path }}" >> $GITHUB_PATH
          echo "${{ matrix.flutter_path }}/bin" >> $GITHUB_PATH

      - name: Add Flutter to the PATH for Windows
        if: startsWith(matrix.os, 'windows')
        run: echo "${env:GITHUB_WORKSPACE}\flutter\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Pre build Android APK
        run: |
          flutter doctor -v
          flutter format --dry-run .
          flutter pub get
          # flutter test
        working-directory: secureme

      - name: Build Android APK
        run: |
          flutter build apk -t lib/main.dart --release --target-platform android-arm,android-arm64 --split-per-abi  --flavor prod --obfuscate --split-debug-info=./build/app/outputs/apk/obfuscation
        working-directory: secureme

      - name: Post build Android APK
        id: post_build_apk
        run: |
          echo "ARMEABI_V7A_ARTIFACT=Android-armeabi-v7a-apk-$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
          echo "ARM64_V8A_ARTIFACT=Android-arm64-v8a-apk-$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV
        working-directory: secureme

      - name: Upload APK (armeabi-v7a arch)
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARMEABI_V7A_ARTIFACT }}
          path: secureme/**/app-armeabi-v7a*
          if-no-files-found: warn
          retention-days: 10

      - name: Upload APK (arm64-v8a arch)
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARM64_V8A_ARTIFACT }}
          path: secureme/**/app-arm64-v8a*
          if-no-files-found: warn
          retention-days: 10

      - name: Upload APK Symbols
        uses: actions/upload-artifact@master
        with:
          name: Obfuscation-symbols
          path: secureme/**/*.symbols
          if-no-files-found: warn
          retention-days: 5

  bump-version:
    name: Bump build version
    needs: build
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    env:
      APP_NAME: "Secureme"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
    steps:
      - name: Download APK (armeabi-v7a arch)
        uses: actions/download-artifact@master
        with:
          name: ${{ needs.build.outputs.armeabi_v7a }}
          if-no-files-found: error

      - name: Download APK (arm64-v8a arch)
        uses: actions/download-artifact@master
        with:
          name: ${{ needs.build.outputs.arm64_v8a }}
          if-no-files-found: error

      - name: Display structure of downloaded files
        run: |
          ls -R
          ls -a

      - name: Create Release tag
        id: create_release_tag
        if: ${{ github.event.inputs.version == '' }}
        uses: mathieudutour/github-tag-action@v4.5
        with:
          release_branches: .*
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Environment variables
        run: |
          if ${{ github.event.inputs.version == '' }}; then
            echo "BUMP_TAG=${{ steps.create_release_tag.outputs.new_tag }}" >> $GITHUB_ENV
            echo "BUMP_VERSION=${{ steps.create_release_tag.outputs.new_version }}" >> $GITHUB_ENV
            echo "CHANGE_LOG=${{ steps.create_release_tag.outputs.changelog }}" >> $GITHUB_ENV
          else
            echo "BUMP_TAG=v${{ github.event.inputs.version}}" >> $GITHUB_ENV
            echo "BUMP_VERSION=${{ github.event.inputs.version}}" >> $GITHUB_ENV
            echo "CHANGE_LOG=Custom Workflow dispatch. Please check repo for changelog." >> $GITHUB_ENV
          fi

      - name: Push new version to Release Tags
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/*.apk"
          name: ${{ env.APP_NAME }}-${{ env.BUMP_VERSION }}
          tag: ${{ env.BUMP_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ env.CHANGE_LOG }}
          allowUpdates: true
          omitName: false
          omitBody: false
          replacesArtifacts: true
